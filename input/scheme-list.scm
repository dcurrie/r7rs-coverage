;; TEST xcons
(assert (equal? '(1 . 2) (xcons 2 1)))
;; TEST cons*
(assert (list cons*))
;; TEST make-list
(assert (list make-list))
;; TEST list-tabulate
(assert (list list-tabulate))
;; TEST list-copy
(assert (list list-copy))
;; TEST circular-list
(assert (list circular-list))
;; TEST iota
(assert (list iota))
;; TEST proper-list?
(assert (list proper-list?))
;; TEST circular-list?
(assert (list circular-list?))
;; TEST dotted-list?
(assert (list dotted-list?))
;; TEST not-pair?
(assert (list not-pair?))
;; TEST null-list?
(assert (list null-list?))
;; TEST list=
(assert (list list=))
;; TEST first
(assert (= (first '(1 2 3 4 5 6 7 8 9 10)) 1))
;; TEST second
(assert (= (second '(1 2 3 4 5 6 7 8 9 10)) 2))
;; TEST third
(assert (= (third '(1 2 3 4 5 6 7 8 9 10)) 3))
;; TEST fourth
(assert (= (fourth '(1 2 3 4 5 6 7 8 9 10)) 4))
;; TEST fifth
(assert (= (fifth '(1 2 3 4 5 6 7 8 9 10)) 5))
;; TEST sixth
(assert (= (sixth '(1 2 3 4 5 6 7 8 9 10)) 6))
;; TEST seventh
(assert (= (seventh '(1 2 3 4 5 6 7 8 9 10)) 7))
;; TEST eighth
(assert (= (eighth '(1 2 3 4 5 6 7 8 9 10)) 8))
;; TEST ninth
(assert (= (ninth '(1 2 3 4 5 6 7 8 9 10)) 9))
;; TEST tenth
(assert (= (tenth '(1 2 3 4 5 6 7 8 9 10)) 10))
;; TEST car+cdr
(assert (list car+cdr))
;; TEST take
(assert (list take))
;; TEST drop
(assert (list drop))
;; TEST take-right
(assert (list take-right))
;; TEST drop-right
(assert (list drop-right))
;; TEST take!
(assert (list take!))
;; TEST drop-right!
(assert (list drop-right!))
;; TEST split-at
(assert (list split-at))
;; TEST split-at!
(assert (list split-at!))
;; TEST last
(assert (list last))
;; TEST last-pair
(assert (list last-pair))
;; TEST length+
(assert (list length+))
;; TEST concatenate
(assert (list concatenate))
;; TEST append!
(assert (list append!))
;; TEST concatenate!
(assert (list concatenate!))
;; TEST reverse!
(assert (list reverse!))
;; TEST append-reverse
(assert (list append-reverse))
;; TEST append-reverse!
(assert (list append-reverse!))
;; TEST zip
(assert (list zip))
;; TEST unzip1
(assert (list unzip1))
;; TEST unzip2
(assert (list unzip2))
;; TEST unzip3
(assert (list unzip3))
;; TEST unzip4
(assert (list unzip4))
;; TEST unzip5
(assert (list unzip5))
;; TEST count
(assert (list count))
;; TEST fold
(assert (list fold))
;; TEST unfold
(assert (list unfold))
;; TEST pair-fold
(assert (list pair-fold))
;; TEST reduce
(assert (list reduce))
;; TEST fold-right
(assert (list fold-right))
;; TEST unfold-right
(assert (list unfold-right))
;; TEST pair-fold-right
(assert (list pair-fold-right))
;; TEST reduce-right
(assert (list reduce-right))
;; TEST append-map
(assert (list append-map))
;; TEST append-map!
(assert (list append-map!))
;; TEST map!
(assert (list map!))
;; TEST pair-for-each
(assert (list pair-for-each))
;; TEST filter-map
(assert (list filter-map))
;; TEST map-in-order
(assert (list map-in-order))
;; TEST filter
(assert (list filter))
;; TEST partition
(assert (list partition))
;; TEST remove
(assert (list remove))
;; TEST filter!
(assert (list filter!))
;; TEST partition!
(assert (list partition!))
;; TEST remove!
(assert (list remove!))
;; TEST find
(assert (list find))
;; TEST find-tail
(assert (list find-tail))
;; TEST any
(assert (list any))
;; TEST every
(assert (list every))
;; TEST list-index
(assert (list list-index))
;; TEST take-while
(assert (list take-while))
;; TEST drop-while
(assert (list drop-while))
;; TEST take-while!
(assert (list take-while!))
;; TEST span
(assert (list span))
;; TEST break
(assert (list break))
;; TEST span!
(assert (list span!))
;; TEST break!
(assert (list break!))
;; TEST delete
(assert (list delete))
;; TEST delete-duplicates
(assert (list delete-duplicates))
;; TEST delete!
(assert (list delete!))
;; TEST delete-duplicates!
(assert (list delete-duplicates!))
;; TEST alist-cons
(assert (list alist-cons))
;; TEST alist-copy
(assert (list alist-copy))
;; TEST alist-delete
(assert (list alist-delete))
;; TEST alist-delete!
(assert (list alist-delete!))
;; TEST lset<=
(assert (list lset<=))
;; TEST lset=
(assert (list lset=))
;; TEST lset-adjoin
(assert (list lset-adjoin))
;; TEST lset-union
(assert (list lset-union))
;; TEST lset-union!
(assert (list lset-union!))
;; TEST lset-intersection
(assert (list lset-intersection))
;; TEST lset-intersection!
(assert (list lset-intersection!))
;; TEST lset-difference
(assert (list lset-difference))
;; TEST lset-difference!
(assert (list lset-difference!))
;; TEST lset-xor
(assert (list lset-xor))
;; TEST lset-xor!
(assert (list lset-xor!))
;; TEST lset-diff+intersection
(assert (list lset-diff+intersection))
;; TEST lset-diff+intersection!
(assert (list lset-diff+intersection!))



